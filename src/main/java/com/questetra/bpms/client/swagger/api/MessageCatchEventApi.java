/*
 * Questetra BPM Suite APIs
 * Questetra BPM Suite APIs
 *
 * OpenAPI spec version: 11.5.1
 * Contact: support@questetra.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.questetra.bpms.client.swagger.api;

import com.questetra.bpms.client.swagger.ApiCallback;
import com.questetra.bpms.client.swagger.ApiClient;
import com.questetra.bpms.client.swagger.ApiException;
import com.questetra.bpms.client.swagger.ApiResponse;
import com.questetra.bpms.client.swagger.Configuration;
import com.questetra.bpms.client.swagger.Pair;
import com.questetra.bpms.client.swagger.ProgressRequestBody;
import com.questetra.bpms.client.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MessageCatchEventApi {
    private ApiClient apiClient;

    public MessageCatchEventApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessageCatchEventApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for receive
     * @param processModelInfoId  (required)
     * @param nodeNumber  (required)
     * @param processInstanceId Process ID  (required)
     * @param key Security Key  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call receiveCall(Long processModelInfoId, Long nodeNumber, Long processInstanceId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/System/Event/IntermediateMessage/{processModelInfoId}/{nodeNumber}/receive"
            .replaceAll("\\{" + "processModelInfoId" + "\\}", apiClient.escapeString(processModelInfoId.toString()))
            .replaceAll("\\{" + "nodeNumber" + "\\}", apiClient.escapeString(nodeNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (processInstanceId != null)
        localVarFormParams.put("processInstanceId", processInstanceId);
        if (key != null)
        localVarFormParams.put("key", key);

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call receiveValidateBeforeCall(Long processModelInfoId, Long nodeNumber, Long processInstanceId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processModelInfoId' is set
        if (processModelInfoId == null) {
            throw new ApiException("Missing the required parameter 'processModelInfoId' when calling receive(Async)");
        }
        
        // verify the required parameter 'nodeNumber' is set
        if (nodeNumber == null) {
            throw new ApiException("Missing the required parameter 'nodeNumber' when calling receive(Async)");
        }
        
        // verify the required parameter 'processInstanceId' is set
        if (processInstanceId == null) {
            throw new ApiException("Missing the required parameter 'processInstanceId' when calling receive(Async)");
        }
        
        
        com.squareup.okhttp.Call call = receiveCall(processModelInfoId, nodeNumber, processInstanceId, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * - https://www.questetra.com/tour/m2/m226/ - R2184 Error Response for HTTP Standby   https://docs.google.com/spreadsheets/u/1/d/17sRiJA5Iq7U2gShK4UJJCPUrGh4ScQOpR2gAnS94s2E/pub?single&#x3D;true&amp;gid&#x3D;11&amp;output&#x3D;html - R2210 Naming Convention for Data Receiving Parameter   https://docs.google.com/spreadsheets/u/1/d/1TNLIho-Uj8BGPrNUGRvTGxm4XdUf3mK0xgwHqQ3pjr4/pub?single&#x3D;true&amp;gid&#x3D;2&amp;output&#x3D;html 
     * @param processModelInfoId  (required)
     * @param nodeNumber  (required)
     * @param processInstanceId Process ID  (required)
     * @param key Security Key  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void receive(Long processModelInfoId, Long nodeNumber, Long processInstanceId, String key) throws ApiException {
        receiveWithHttpInfo(processModelInfoId, nodeNumber, processInstanceId, key);
    }

    /**
     * 
     * - https://www.questetra.com/tour/m2/m226/ - R2184 Error Response for HTTP Standby   https://docs.google.com/spreadsheets/u/1/d/17sRiJA5Iq7U2gShK4UJJCPUrGh4ScQOpR2gAnS94s2E/pub?single&#x3D;true&amp;gid&#x3D;11&amp;output&#x3D;html - R2210 Naming Convention for Data Receiving Parameter   https://docs.google.com/spreadsheets/u/1/d/1TNLIho-Uj8BGPrNUGRvTGxm4XdUf3mK0xgwHqQ3pjr4/pub?single&#x3D;true&amp;gid&#x3D;2&amp;output&#x3D;html 
     * @param processModelInfoId  (required)
     * @param nodeNumber  (required)
     * @param processInstanceId Process ID  (required)
     * @param key Security Key  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> receiveWithHttpInfo(Long processModelInfoId, Long nodeNumber, Long processInstanceId, String key) throws ApiException {
        com.squareup.okhttp.Call call = receiveValidateBeforeCall(processModelInfoId, nodeNumber, processInstanceId, key, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * - https://www.questetra.com/tour/m2/m226/ - R2184 Error Response for HTTP Standby   https://docs.google.com/spreadsheets/u/1/d/17sRiJA5Iq7U2gShK4UJJCPUrGh4ScQOpR2gAnS94s2E/pub?single&#x3D;true&amp;gid&#x3D;11&amp;output&#x3D;html - R2210 Naming Convention for Data Receiving Parameter   https://docs.google.com/spreadsheets/u/1/d/1TNLIho-Uj8BGPrNUGRvTGxm4XdUf3mK0xgwHqQ3pjr4/pub?single&#x3D;true&amp;gid&#x3D;2&amp;output&#x3D;html 
     * @param processModelInfoId  (required)
     * @param nodeNumber  (required)
     * @param processInstanceId Process ID  (required)
     * @param key Security Key  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call receiveAsync(Long processModelInfoId, Long nodeNumber, Long processInstanceId, String key, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = receiveValidateBeforeCall(processModelInfoId, nodeNumber, processInstanceId, key, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for start
     * @param processModelInfoId  (required)
     * @param nodeNumber  (required)
     * @param key Security Key  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startCall(Long processModelInfoId, Long nodeNumber, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/System/Event/MessageStart/{processModelInfoId}/{nodeNumber}/start"
            .replaceAll("\\{" + "processModelInfoId" + "\\}", apiClient.escapeString(processModelInfoId.toString()))
            .replaceAll("\\{" + "nodeNumber" + "\\}", apiClient.escapeString(nodeNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (key != null)
        localVarFormParams.put("key", key);

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startValidateBeforeCall(Long processModelInfoId, Long nodeNumber, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processModelInfoId' is set
        if (processModelInfoId == null) {
            throw new ApiException("Missing the required parameter 'processModelInfoId' when calling start(Async)");
        }
        
        // verify the required parameter 'nodeNumber' is set
        if (nodeNumber == null) {
            throw new ApiException("Missing the required parameter 'nodeNumber' when calling start(Async)");
        }
        
        
        com.squareup.okhttp.Call call = startCall(processModelInfoId, nodeNumber, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * - https://www.questetra.com/tour/m2/m221/ - R2182 Error Notification of HTTP Start   https://docs.google.com/spreadsheets/u/1/d/17sRiJA5Iq7U2gShK4UJJCPUrGh4ScQOpR2gAnS94s2E/pub?single&#x3D;true&amp;gid&#x3D;9&amp;output&#x3D;html&amp;widget&#x3D;true - R2210 Naming Convention for Data Receiving Parameter   https://docs.google.com/spreadsheets/u/1/d/1TNLIho-Uj8BGPrNUGRvTGxm4XdUf3mK0xgwHqQ3pjr4/pub?single&#x3D;true&amp;gid&#x3D;2&amp;output&#x3D;html 
     * @param processModelInfoId  (required)
     * @param nodeNumber  (required)
     * @param key Security Key  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void start(Long processModelInfoId, Long nodeNumber, String key) throws ApiException {
        startWithHttpInfo(processModelInfoId, nodeNumber, key);
    }

    /**
     * 
     * - https://www.questetra.com/tour/m2/m221/ - R2182 Error Notification of HTTP Start   https://docs.google.com/spreadsheets/u/1/d/17sRiJA5Iq7U2gShK4UJJCPUrGh4ScQOpR2gAnS94s2E/pub?single&#x3D;true&amp;gid&#x3D;9&amp;output&#x3D;html&amp;widget&#x3D;true - R2210 Naming Convention for Data Receiving Parameter   https://docs.google.com/spreadsheets/u/1/d/1TNLIho-Uj8BGPrNUGRvTGxm4XdUf3mK0xgwHqQ3pjr4/pub?single&#x3D;true&amp;gid&#x3D;2&amp;output&#x3D;html 
     * @param processModelInfoId  (required)
     * @param nodeNumber  (required)
     * @param key Security Key  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> startWithHttpInfo(Long processModelInfoId, Long nodeNumber, String key) throws ApiException {
        com.squareup.okhttp.Call call = startValidateBeforeCall(processModelInfoId, nodeNumber, key, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * - https://www.questetra.com/tour/m2/m221/ - R2182 Error Notification of HTTP Start   https://docs.google.com/spreadsheets/u/1/d/17sRiJA5Iq7U2gShK4UJJCPUrGh4ScQOpR2gAnS94s2E/pub?single&#x3D;true&amp;gid&#x3D;9&amp;output&#x3D;html&amp;widget&#x3D;true - R2210 Naming Convention for Data Receiving Parameter   https://docs.google.com/spreadsheets/u/1/d/1TNLIho-Uj8BGPrNUGRvTGxm4XdUf3mK0xgwHqQ3pjr4/pub?single&#x3D;true&amp;gid&#x3D;2&amp;output&#x3D;html 
     * @param processModelInfoId  (required)
     * @param nodeNumber  (required)
     * @param key Security Key  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startAsync(Long processModelInfoId, Long nodeNumber, String key, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startValidateBeforeCall(processModelInfoId, nodeNumber, key, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
