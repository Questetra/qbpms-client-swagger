/*
 * Questetra BPM Suite APIs
 * Questetra BPM Suite APIs
 *
 * OpenAPI spec version: 12.3.0
 * Contact: support@questetra.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.questetra.bpms.client.swagger.api;

import com.questetra.bpms.client.swagger.ApiCallback;
import com.questetra.bpms.client.swagger.ApiClient;
import com.questetra.bpms.client.swagger.ApiException;
import com.questetra.bpms.client.swagger.ApiResponse;
import com.questetra.bpms.client.swagger.Configuration;
import com.questetra.bpms.client.swagger.Pair;
import com.questetra.bpms.client.swagger.ProgressRequestBody;
import com.questetra.bpms.client.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.questetra.bpms.client.swagger.model.Errors;
import com.questetra.bpms.client.swagger.model.QgroupList;
import com.questetra.bpms.client.swagger.model.QgroupWrapper;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QgroupApi {
    private ApiClient apiClient;

    public QgroupApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QgroupApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addQgroup
     * @param name Organization name (required)
     * @param parentQgroupId Parent Organization ID (required)
     * @param email Organization email address (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addQgroupCall(String name, Long parentQgroupId, String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/API/UGA/Qgroup/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (name != null)
        localVarFormParams.put("name", name);
        if (email != null)
        localVarFormParams.put("email", email);
        if (parentQgroupId != null)
        localVarFormParams.put("parentQgroupId", parentQgroupId);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addQgroupValidateBeforeCall(String name, Long parentQgroupId, String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling addQgroup(Async)");
        }
        
        // verify the required parameter 'parentQgroupId' is set
        if (parentQgroupId == null) {
            throw new ApiException("Missing the required parameter 'parentQgroupId' when calling addQgroup(Async)");
        }
        

        com.squareup.okhttp.Call call = addQgroupCall(name, parentQgroupId, email, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creating an Organization Unit
     * Creating an Organization Unit
     * @param name Organization name (required)
     * @param parentQgroupId Parent Organization ID (required)
     * @param email Organization email address (optional)
     * @return QgroupWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QgroupWrapper addQgroup(String name, Long parentQgroupId, String email) throws ApiException {
        ApiResponse<QgroupWrapper> resp = addQgroupWithHttpInfo(name, parentQgroupId, email);
        return resp.getData();
    }

    /**
     * Creating an Organization Unit
     * Creating an Organization Unit
     * @param name Organization name (required)
     * @param parentQgroupId Parent Organization ID (required)
     * @param email Organization email address (optional)
     * @return ApiResponse&lt;QgroupWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QgroupWrapper> addQgroupWithHttpInfo(String name, Long parentQgroupId, String email) throws ApiException {
        com.squareup.okhttp.Call call = addQgroupValidateBeforeCall(name, parentQgroupId, email, null, null);
        Type localVarReturnType = new TypeToken<QgroupWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creating an Organization Unit (asynchronously)
     * Creating an Organization Unit
     * @param name Organization name (required)
     * @param parentQgroupId Parent Organization ID (required)
     * @param email Organization email address (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addQgroupAsync(String name, Long parentQgroupId, String email, final ApiCallback<QgroupWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addQgroupValidateBeforeCall(name, parentQgroupId, email, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QgroupWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteQgroup
     * @param id Organization ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteQgroupCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/API/UGA/Qgroup/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (id != null)
        localVarFormParams.put("id", id);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteQgroupValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteQgroup(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteQgroupCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deleting an Organization Unit
     * Deleting an Organization Unit
     * @param id Organization ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteQgroup(Long id) throws ApiException {
        deleteQgroupWithHttpInfo(id);
    }

    /**
     * Deleting an Organization Unit
     * Deleting an Organization Unit
     * @param id Organization ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteQgroupWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = deleteQgroupValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deleting an Organization Unit (asynchronously)
     * Deleting an Organization Unit
     * @param id Organization ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteQgroupAsync(Long id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteQgroupValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for findQgroup
     * @param id  (optional)
     * @param name  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findQgroupCall(Long id, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/API/User/Qgroup/find";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findQgroupValidateBeforeCall(Long id, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = findQgroupCall(id, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieving an Organization Unit
     * Retrieving an Organization Unit
     * @param id  (optional)
     * @param name  (optional)
     * @return QgroupWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QgroupWrapper findQgroup(Long id, String name) throws ApiException {
        ApiResponse<QgroupWrapper> resp = findQgroupWithHttpInfo(id, name);
        return resp.getData();
    }

    /**
     * Retrieving an Organization Unit
     * Retrieving an Organization Unit
     * @param id  (optional)
     * @param name  (optional)
     * @return ApiResponse&lt;QgroupWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QgroupWrapper> findQgroupWithHttpInfo(Long id, String name) throws ApiException {
        com.squareup.okhttp.Call call = findQgroupValidateBeforeCall(id, name, null, null);
        Type localVarReturnType = new TypeToken<QgroupWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieving an Organization Unit (asynchronously)
     * Retrieving an Organization Unit
     * @param id  (optional)
     * @param name  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findQgroupAsync(Long id, String name, final ApiCallback<QgroupWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findQgroupValidateBeforeCall(id, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QgroupWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listQgroups
     * @param query  (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listQgroupsCall(String query, Integer limit, Integer start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/API/User/Qgroup/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listQgroupsValidateBeforeCall(String query, Integer limit, Integer start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listQgroupsCall(query, limit, start, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieving a List of Organizations
     * Retrieving a List of Organizations
     * @param query  (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @return QgroupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QgroupList listQgroups(String query, Integer limit, Integer start) throws ApiException {
        ApiResponse<QgroupList> resp = listQgroupsWithHttpInfo(query, limit, start);
        return resp.getData();
    }

    /**
     * Retrieving a List of Organizations
     * Retrieving a List of Organizations
     * @param query  (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @return ApiResponse&lt;QgroupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QgroupList> listQgroupsWithHttpInfo(String query, Integer limit, Integer start) throws ApiException {
        com.squareup.okhttp.Call call = listQgroupsValidateBeforeCall(query, limit, start, null, null);
        Type localVarReturnType = new TypeToken<QgroupList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieving a List of Organizations (asynchronously)
     * Retrieving a List of Organizations
     * @param query  (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listQgroupsAsync(String query, Integer limit, Integer start, final ApiCallback<QgroupList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listQgroupsValidateBeforeCall(query, limit, start, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QgroupList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateQgroup
     * @param id Organization ID (required)
     * @param name Organization name (optional)
     * @param email Organization email address (optional)
     * @param parentQgroupId Parent Organization ID (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateQgroupCall(Long id, String name, String email, Long parentQgroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/API/UGA/Qgroup/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (id != null)
        localVarFormParams.put("id", id);
        if (name != null)
        localVarFormParams.put("name", name);
        if (email != null)
        localVarFormParams.put("email", email);
        if (parentQgroupId != null)
        localVarFormParams.put("parentQgroupId", parentQgroupId);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateQgroupValidateBeforeCall(Long id, String name, String email, Long parentQgroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateQgroup(Async)");
        }
        

        com.squareup.okhttp.Call call = updateQgroupCall(id, name, email, parentQgroupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updating an Organization Unit
     * Updating an Organization Unit
     * @param id Organization ID (required)
     * @param name Organization name (optional)
     * @param email Organization email address (optional)
     * @param parentQgroupId Parent Organization ID (optional)
     * @return QgroupWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QgroupWrapper updateQgroup(Long id, String name, String email, Long parentQgroupId) throws ApiException {
        ApiResponse<QgroupWrapper> resp = updateQgroupWithHttpInfo(id, name, email, parentQgroupId);
        return resp.getData();
    }

    /**
     * Updating an Organization Unit
     * Updating an Organization Unit
     * @param id Organization ID (required)
     * @param name Organization name (optional)
     * @param email Organization email address (optional)
     * @param parentQgroupId Parent Organization ID (optional)
     * @return ApiResponse&lt;QgroupWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QgroupWrapper> updateQgroupWithHttpInfo(Long id, String name, String email, Long parentQgroupId) throws ApiException {
        com.squareup.okhttp.Call call = updateQgroupValidateBeforeCall(id, name, email, parentQgroupId, null, null);
        Type localVarReturnType = new TypeToken<QgroupWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updating an Organization Unit (asynchronously)
     * Updating an Organization Unit
     * @param id Organization ID (required)
     * @param name Organization name (optional)
     * @param email Organization email address (optional)
     * @param parentQgroupId Parent Organization ID (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateQgroupAsync(Long id, String name, String email, Long parentQgroupId, final ApiCallback<QgroupWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateQgroupValidateBeforeCall(id, name, email, parentQgroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QgroupWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
