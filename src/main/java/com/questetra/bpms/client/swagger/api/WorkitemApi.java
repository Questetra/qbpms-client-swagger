/*
 * Questetra BPM Suite APIs
 * Questetra BPM Suite APIs
 *
 * OpenAPI spec version: 11.6.0
 * Contact: support@questetra.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.questetra.bpms.client.swagger.api;

import com.questetra.bpms.client.swagger.ApiCallback;
import com.questetra.bpms.client.swagger.ApiClient;
import com.questetra.bpms.client.swagger.ApiException;
import com.questetra.bpms.client.swagger.ApiResponse;
import com.questetra.bpms.client.swagger.Configuration;
import com.questetra.bpms.client.swagger.Pair;
import com.questetra.bpms.client.swagger.ProgressRequestBody;
import com.questetra.bpms.client.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.questetra.bpms.client.swagger.model.Errors;
import com.questetra.bpms.client.swagger.model.WorkitemList;
import com.questetra.bpms.client.swagger.model.WorkitemOpResultList;
import com.questetra.bpms.client.swagger.model.WorkitemWithDataList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkitemApi {
    private ApiClient apiClient;

    public WorkitemApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkitemApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addStar
     * @param workitemId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addStarCall(Long workitemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/API/OR/Workitem/Star/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (workitemId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "workitemId", workitemId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addStarValidateBeforeCall(Long workitemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'workitemId' is set
        if (workitemId == null) {
            throw new ApiException("Missing the required parameter 'workitemId' when calling addStar(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addStarCall(workitemId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Adding a Star to a Task
     * Adding a Star to a Task
     * @param workitemId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addStar(Long workitemId) throws ApiException {
        addStarWithHttpInfo(workitemId);
    }

    /**
     * Adding a Star to a Task
     * Adding a Star to a Task
     * @param workitemId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addStarWithHttpInfo(Long workitemId) throws ApiException {
        com.squareup.okhttp.Call call = addStarValidateBeforeCall(workitemId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Adding a Star to a Task (asynchronously)
     * Adding a Star to a Task
     * @param workitemId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addStarAsync(Long workitemId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addStarValidateBeforeCall(workitemId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for batchAccespWorkitem
     * @param workitemIds Multiple IDs are OK (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call batchAccespWorkitemCall(List<Long> workitemIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/API/PE/Workitem/batchAccept";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (workitemIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "workitemIds", workitemIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call batchAccespWorkitemValidateBeforeCall(List<Long> workitemIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'workitemIds' is set
        if (workitemIds == null) {
            throw new ApiException("Missing the required parameter 'workitemIds' when calling batchAccespWorkitem(Async)");
        }
        
        
        com.squareup.okhttp.Call call = batchAccespWorkitemCall(workitemIds, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Accepting a Offered Task
     * Accepting a Offered Task
     * @param workitemIds Multiple IDs are OK (required)
     * @return WorkitemOpResultList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorkitemOpResultList batchAccespWorkitem(List<Long> workitemIds) throws ApiException {
        ApiResponse<WorkitemOpResultList> resp = batchAccespWorkitemWithHttpInfo(workitemIds);
        return resp.getData();
    }

    /**
     * Accepting a Offered Task
     * Accepting a Offered Task
     * @param workitemIds Multiple IDs are OK (required)
     * @return ApiResponse&lt;WorkitemOpResultList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorkitemOpResultList> batchAccespWorkitemWithHttpInfo(List<Long> workitemIds) throws ApiException {
        com.squareup.okhttp.Call call = batchAccespWorkitemValidateBeforeCall(workitemIds, null, null);
        Type localVarReturnType = new TypeToken<WorkitemOpResultList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Accepting a Offered Task (asynchronously)
     * Accepting a Offered Task
     * @param workitemIds Multiple IDs are OK (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call batchAccespWorkitemAsync(List<Long> workitemIds, final ApiCallback<WorkitemOpResultList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = batchAccespWorkitemValidateBeforeCall(workitemIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorkitemOpResultList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for list
     * @param criteria Search condition (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listCall(String criteria, Integer limit, Integer start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/API/OR/Workitem/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (criteria != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "criteria", criteria));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listValidateBeforeCall(String criteria, Integer limit, Integer start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = listCall(criteria, limit, start, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Querying for Task records operated by the User
     * Querying for Task records operated by the User
     * @param criteria Search condition (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @return WorkitemWithDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorkitemWithDataList list(String criteria, Integer limit, Integer start) throws ApiException {
        ApiResponse<WorkitemWithDataList> resp = listWithHttpInfo(criteria, limit, start);
        return resp.getData();
    }

    /**
     * Querying for Task records operated by the User
     * Querying for Task records operated by the User
     * @param criteria Search condition (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @return ApiResponse&lt;WorkitemWithDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorkitemWithDataList> listWithHttpInfo(String criteria, Integer limit, Integer start) throws ApiException {
        com.squareup.okhttp.Call call = listValidateBeforeCall(criteria, limit, start, null, null);
        Type localVarReturnType = new TypeToken<WorkitemWithDataList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Querying for Task records operated by the User (asynchronously)
     * Querying for Task records operated by the User
     * @param criteria Search condition (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAsync(String criteria, Integer limit, Integer start, final ApiCallback<WorkitemWithDataList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listValidateBeforeCall(criteria, limit, start, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorkitemWithDataList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAllocatedWorkitem
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAllocatedWorkitemCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/API/PE/Workitem/listAllocated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAllocatedWorkitemValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = listAllocatedWorkitemCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieving a List of My Tasks
     * Retrieving a List of My Tasks
     * @return WorkitemList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorkitemList listAllocatedWorkitem() throws ApiException {
        ApiResponse<WorkitemList> resp = listAllocatedWorkitemWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieving a List of My Tasks
     * Retrieving a List of My Tasks
     * @return ApiResponse&lt;WorkitemList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorkitemList> listAllocatedWorkitemWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listAllocatedWorkitemValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<WorkitemList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieving a List of My Tasks (asynchronously)
     * Retrieving a List of My Tasks
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAllocatedWorkitemAsync(final ApiCallback<WorkitemList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAllocatedWorkitemValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorkitemList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listCsv
     * @param criteria Search condition (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listCsvCall(String criteria, Integer limit, Integer start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/API/OR/Workitem/listCsv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (criteria != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "criteria", criteria));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listCsvValidateBeforeCall(String criteria, Integer limit, Integer start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = listCsvCall(criteria, limit, start, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Querying for Task records operated by the User
     * Querying for Task records operated by the User
     * @param criteria Search condition (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String listCsv(String criteria, Integer limit, Integer start) throws ApiException {
        ApiResponse<String> resp = listCsvWithHttpInfo(criteria, limit, start);
        return resp.getData();
    }

    /**
     * Querying for Task records operated by the User
     * Querying for Task records operated by the User
     * @param criteria Search condition (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> listCsvWithHttpInfo(String criteria, Integer limit, Integer start) throws ApiException {
        com.squareup.okhttp.Call call = listCsvValidateBeforeCall(criteria, limit, start, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Querying for Task records operated by the User (asynchronously)
     * Querying for Task records operated by the User
     * @param criteria Search condition (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listCsvAsync(String criteria, Integer limit, Integer start, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listCsvValidateBeforeCall(criteria, limit, start, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listCsvUtf16
     * @param criteria Search condition (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listCsvUtf16Call(String criteria, Integer limit, Integer start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/API/OR/Workitem/listCsvUtf16";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (criteria != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "criteria", criteria));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listCsvUtf16ValidateBeforeCall(String criteria, Integer limit, Integer start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = listCsvUtf16Call(criteria, limit, start, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Querying for Task records operated by the User
     * Querying for Task records operated by the User
     * @param criteria Search condition (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String listCsvUtf16(String criteria, Integer limit, Integer start) throws ApiException {
        ApiResponse<String> resp = listCsvUtf16WithHttpInfo(criteria, limit, start);
        return resp.getData();
    }

    /**
     * Querying for Task records operated by the User
     * Querying for Task records operated by the User
     * @param criteria Search condition (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> listCsvUtf16WithHttpInfo(String criteria, Integer limit, Integer start) throws ApiException {
        com.squareup.okhttp.Call call = listCsvUtf16ValidateBeforeCall(criteria, limit, start, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Querying for Task records operated by the User (asynchronously)
     * Querying for Task records operated by the User
     * @param criteria Search condition (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listCsvUtf16Async(String criteria, Integer limit, Integer start, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listCsvUtf16ValidateBeforeCall(criteria, limit, start, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listOfferedWorkitem
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listOfferedWorkitemCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/API/PE/Workitem/listOffered";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listOfferedWorkitemValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = listOfferedWorkitemCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieving a List of Offered Tasks
     * Retrieving a List of Offered Tasks
     * @return WorkitemList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorkitemList listOfferedWorkitem() throws ApiException {
        ApiResponse<WorkitemList> resp = listOfferedWorkitemWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieving a List of Offered Tasks
     * Retrieving a List of Offered Tasks
     * @return ApiResponse&lt;WorkitemList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorkitemList> listOfferedWorkitemWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listOfferedWorkitemValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<WorkitemList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieving a List of Offered Tasks (asynchronously)
     * Retrieving a List of Offered Tasks
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listOfferedWorkitemAsync(final ApiCallback<WorkitemList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listOfferedWorkitemValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorkitemList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reallocate
     * @param workitemId  (required)
     * @param quserId  (required)
     * @param qgroupId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reallocateCall(Long workitemId, Long quserId, Long qgroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/API/PIM/Workitem/reallocate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (workitemId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "workitemId", workitemId));
        if (quserId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "quserId", quserId));
        if (qgroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "qgroupId", qgroupId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reallocateValidateBeforeCall(Long workitemId, Long quserId, Long qgroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'workitemId' is set
        if (workitemId == null) {
            throw new ApiException("Missing the required parameter 'workitemId' when calling reallocate(Async)");
        }
        
        // verify the required parameter 'quserId' is set
        if (quserId == null) {
            throw new ApiException("Missing the required parameter 'quserId' when calling reallocate(Async)");
        }
        
        // verify the required parameter 'qgroupId' is set
        if (qgroupId == null) {
            throw new ApiException("Missing the required parameter 'qgroupId' when calling reallocate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = reallocateCall(workitemId, quserId, qgroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Reallocating Task
     * The specified Task is placed on the Swimlane which is set [allocated to the person who processed the first task], and if multiple Tasks in processing exist, all of the Tasks will be allocated.
     * @param workitemId  (required)
     * @param quserId  (required)
     * @param qgroupId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void reallocate(Long workitemId, Long quserId, Long qgroupId) throws ApiException {
        reallocateWithHttpInfo(workitemId, quserId, qgroupId);
    }

    /**
     * Reallocating Task
     * The specified Task is placed on the Swimlane which is set [allocated to the person who processed the first task], and if multiple Tasks in processing exist, all of the Tasks will be allocated.
     * @param workitemId  (required)
     * @param quserId  (required)
     * @param qgroupId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> reallocateWithHttpInfo(Long workitemId, Long quserId, Long qgroupId) throws ApiException {
        com.squareup.okhttp.Call call = reallocateValidateBeforeCall(workitemId, quserId, qgroupId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Reallocating Task (asynchronously)
     * The specified Task is placed on the Swimlane which is set [allocated to the person who processed the first task], and if multiple Tasks in processing exist, all of the Tasks will be allocated.
     * @param workitemId  (required)
     * @param quserId  (required)
     * @param qgroupId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reallocateAsync(Long workitemId, Long quserId, Long qgroupId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reallocateValidateBeforeCall(workitemId, quserId, qgroupId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for removeStar
     * @param workitemId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeStarCall(Long workitemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/API/OR/Workitem/Star/remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (workitemId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "workitemId", workitemId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeStarValidateBeforeCall(Long workitemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'workitemId' is set
        if (workitemId == null) {
            throw new ApiException("Missing the required parameter 'workitemId' when calling removeStar(Async)");
        }
        
        
        com.squareup.okhttp.Call call = removeStarCall(workitemId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Removing a Star from a Task
     * Removing a Star from a Task
     * @param workitemId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeStar(Long workitemId) throws ApiException {
        removeStarWithHttpInfo(workitemId);
    }

    /**
     * Removing a Star from a Task
     * Removing a Star from a Task
     * @param workitemId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeStarWithHttpInfo(Long workitemId) throws ApiException {
        com.squareup.okhttp.Call call = removeStarValidateBeforeCall(workitemId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removing a Star from a Task (asynchronously)
     * Removing a Star from a Task
     * @param workitemId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeStarAsync(Long workitemId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeStarValidateBeforeCall(workitemId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
