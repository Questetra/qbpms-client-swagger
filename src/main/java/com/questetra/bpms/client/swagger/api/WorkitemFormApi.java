/*
 * Questetra BPM Suite APIs
 * Questetra BPM Suite APIs
 *
 * OpenAPI spec version: 12.3.0
 * Contact: support@questetra.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.questetra.bpms.client.swagger.api;

import com.questetra.bpms.client.swagger.ApiCallback;
import com.questetra.bpms.client.swagger.ApiClient;
import com.questetra.bpms.client.swagger.ApiException;
import com.questetra.bpms.client.swagger.ApiResponse;
import com.questetra.bpms.client.swagger.Configuration;
import com.questetra.bpms.client.swagger.Pair;
import com.questetra.bpms.client.swagger.ProgressRequestBody;
import com.questetra.bpms.client.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.questetra.bpms.client.swagger.model.WorkitemForm;
import com.questetra.bpms.client.swagger.model.WorkitemFormResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkitemFormApi {
    private ApiClient apiClient;

    public WorkitemFormApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkitemFormApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getWorkitemForm
     * @param workitemId Workitem ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWorkitemFormCall(Long workitemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/API/PE/Workitem/Form/viewXml";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (workitemId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("workitemId", workitemId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWorkitemFormValidateBeforeCall(Long workitemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'workitemId' is set
        if (workitemId == null) {
            throw new ApiException("Missing the required parameter 'workitemId' when calling getWorkitemForm(Async)");
        }
        

        com.squareup.okhttp.Call call = getWorkitemFormCall(workitemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieving a List of forms for Task output
     * 
     * @param workitemId Workitem ID (required)
     * @return WorkitemForm
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorkitemForm getWorkitemForm(Long workitemId) throws ApiException {
        ApiResponse<WorkitemForm> resp = getWorkitemFormWithHttpInfo(workitemId);
        return resp.getData();
    }

    /**
     * Retrieving a List of forms for Task output
     * 
     * @param workitemId Workitem ID (required)
     * @return ApiResponse&lt;WorkitemForm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorkitemForm> getWorkitemFormWithHttpInfo(Long workitemId) throws ApiException {
        com.squareup.okhttp.Call call = getWorkitemFormValidateBeforeCall(workitemId, null, null);
        Type localVarReturnType = new TypeToken<WorkitemForm>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieving a List of forms for Task output (asynchronously)
     * 
     * @param workitemId Workitem ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWorkitemFormAsync(Long workitemId, final ApiCallback<WorkitemForm> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWorkitemFormValidateBeforeCall(workitemId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorkitemForm>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for saveWorkitemForm
     * @param workitemId Workitem ID (required)
     * @param title  (optional)
     * @param qgroupId (/workitem-form/executing-roles) (optional)
     * @param flow (/workitem-form/user-selects) (optional)
     * @param saveOnly Task Completetion &#x3D; false (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveWorkitemFormCall(Long workitemId, String title, Long qgroupId, Long flow, Boolean saveOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/API/PE/Workitem/Form/save";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (workitemId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("workitemId", workitemId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (title != null)
        localVarFormParams.put("title", title);
        if (qgroupId != null)
        localVarFormParams.put("qgroupId", qgroupId);
        if (flow != null)
        localVarFormParams.put("flow", flow);
        if (saveOnly != null)
        localVarFormParams.put("saveOnly", saveOnly);

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call saveWorkitemFormValidateBeforeCall(Long workitemId, String title, Long qgroupId, Long flow, Boolean saveOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'workitemId' is set
        if (workitemId == null) {
            throw new ApiException("Missing the required parameter 'workitemId' when calling saveWorkitemForm(Async)");
        }
        

        com.squareup.okhttp.Call call = saveWorkitemFormCall(workitemId, title, qgroupId, flow, saveOnly, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Submitting the Task output
     * Submitting the Task output
     * @param workitemId Workitem ID (required)
     * @param title  (optional)
     * @param qgroupId (/workitem-form/executing-roles) (optional)
     * @param flow (/workitem-form/user-selects) (optional)
     * @param saveOnly Task Completetion &#x3D; false (optional)
     * @return WorkitemFormResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorkitemFormResult saveWorkitemForm(Long workitemId, String title, Long qgroupId, Long flow, Boolean saveOnly) throws ApiException {
        ApiResponse<WorkitemFormResult> resp = saveWorkitemFormWithHttpInfo(workitemId, title, qgroupId, flow, saveOnly);
        return resp.getData();
    }

    /**
     * Submitting the Task output
     * Submitting the Task output
     * @param workitemId Workitem ID (required)
     * @param title  (optional)
     * @param qgroupId (/workitem-form/executing-roles) (optional)
     * @param flow (/workitem-form/user-selects) (optional)
     * @param saveOnly Task Completetion &#x3D; false (optional)
     * @return ApiResponse&lt;WorkitemFormResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorkitemFormResult> saveWorkitemFormWithHttpInfo(Long workitemId, String title, Long qgroupId, Long flow, Boolean saveOnly) throws ApiException {
        com.squareup.okhttp.Call call = saveWorkitemFormValidateBeforeCall(workitemId, title, qgroupId, flow, saveOnly, null, null);
        Type localVarReturnType = new TypeToken<WorkitemFormResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Submitting the Task output (asynchronously)
     * Submitting the Task output
     * @param workitemId Workitem ID (required)
     * @param title  (optional)
     * @param qgroupId (/workitem-form/executing-roles) (optional)
     * @param flow (/workitem-form/user-selects) (optional)
     * @param saveOnly Task Completetion &#x3D; false (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveWorkitemFormAsync(Long workitemId, String title, Long qgroupId, Long flow, Boolean saveOnly, final ApiCallback<WorkitemFormResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveWorkitemFormValidateBeforeCall(workitemId, title, qgroupId, flow, saveOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorkitemFormResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
