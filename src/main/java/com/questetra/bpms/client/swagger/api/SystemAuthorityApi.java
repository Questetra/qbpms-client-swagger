/*
 * Questetra BPM Suite APIs
 * Questetra BPM Suite APIs
 *
 * OpenAPI spec version: 12.3.0
 * Contact: support@questetra.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.questetra.bpms.client.swagger.api;

import com.questetra.bpms.client.swagger.ApiCallback;
import com.questetra.bpms.client.swagger.ApiClient;
import com.questetra.bpms.client.swagger.ApiException;
import com.questetra.bpms.client.swagger.ApiResponse;
import com.questetra.bpms.client.swagger.Configuration;
import com.questetra.bpms.client.swagger.Pair;
import com.questetra.bpms.client.swagger.ProgressRequestBody;
import com.questetra.bpms.client.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.questetra.bpms.client.swagger.model.Errors;
import com.questetra.bpms.client.swagger.model.QuserSystemAuthorityList;
import com.questetra.bpms.client.swagger.model.SystemAuthorityList;
import com.questetra.bpms.client.swagger.model.SystemAuthorityWrapper;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SystemAuthorityApi {
    private ApiClient apiClient;

    public SystemAuthorityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SystemAuthorityApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addSystemAuthorityToQgroup
     * @param type Type of System Authorization 0:System Administrator Authorization 1:App Creator Authorization 2:User Manager Authorization (required)
     * @param qgroupId Organization ID (required)
     * @param leader  (optional)
     * @param descendantQgroups  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addSystemAuthorityToQgroupCall(Integer type, Long qgroupId, Boolean leader, Boolean descendantQgroups, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/API/Admin/SystemAuthority/addToQgroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (type != null)
        localVarFormParams.put("type", type);
        if (qgroupId != null)
        localVarFormParams.put("qgroupId", qgroupId);
        if (leader != null)
        localVarFormParams.put("leader", leader);
        if (descendantQgroups != null)
        localVarFormParams.put("descendantQgroups", descendantQgroups);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addSystemAuthorityToQgroupValidateBeforeCall(Integer type, Long qgroupId, Boolean leader, Boolean descendantQgroups, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling addSystemAuthorityToQgroup(Async)");
        }
        
        // verify the required parameter 'qgroupId' is set
        if (qgroupId == null) {
            throw new ApiException("Missing the required parameter 'qgroupId' when calling addSystemAuthorityToQgroup(Async)");
        }
        

        com.squareup.okhttp.Call call = addSystemAuthorityToQgroupCall(type, qgroupId, leader, descendantQgroups, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Granting a System Privilege to an Organization
     * Granting a System Privilege to an Organization
     * @param type Type of System Authorization 0:System Administrator Authorization 1:App Creator Authorization 2:User Manager Authorization (required)
     * @param qgroupId Organization ID (required)
     * @param leader  (optional)
     * @param descendantQgroups  (optional)
     * @return SystemAuthorityWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SystemAuthorityWrapper addSystemAuthorityToQgroup(Integer type, Long qgroupId, Boolean leader, Boolean descendantQgroups) throws ApiException {
        ApiResponse<SystemAuthorityWrapper> resp = addSystemAuthorityToQgroupWithHttpInfo(type, qgroupId, leader, descendantQgroups);
        return resp.getData();
    }

    /**
     * Granting a System Privilege to an Organization
     * Granting a System Privilege to an Organization
     * @param type Type of System Authorization 0:System Administrator Authorization 1:App Creator Authorization 2:User Manager Authorization (required)
     * @param qgroupId Organization ID (required)
     * @param leader  (optional)
     * @param descendantQgroups  (optional)
     * @return ApiResponse&lt;SystemAuthorityWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SystemAuthorityWrapper> addSystemAuthorityToQgroupWithHttpInfo(Integer type, Long qgroupId, Boolean leader, Boolean descendantQgroups) throws ApiException {
        com.squareup.okhttp.Call call = addSystemAuthorityToQgroupValidateBeforeCall(type, qgroupId, leader, descendantQgroups, null, null);
        Type localVarReturnType = new TypeToken<SystemAuthorityWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Granting a System Privilege to an Organization (asynchronously)
     * Granting a System Privilege to an Organization
     * @param type Type of System Authorization 0:System Administrator Authorization 1:App Creator Authorization 2:User Manager Authorization (required)
     * @param qgroupId Organization ID (required)
     * @param leader  (optional)
     * @param descendantQgroups  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addSystemAuthorityToQgroupAsync(Integer type, Long qgroupId, Boolean leader, Boolean descendantQgroups, final ApiCallback<SystemAuthorityWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addSystemAuthorityToQgroupValidateBeforeCall(type, qgroupId, leader, descendantQgroups, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SystemAuthorityWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addSystemAuthorityToQrole
     * @param type Type of System Authorization 0:System Administrator Authorization 1:App Creator Authorization 2:User Manager Authorization (required)
     * @param qroleId Role ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addSystemAuthorityToQroleCall(Integer type, Long qroleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/API/Admin/SystemAuthority/addToQrole";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (type != null)
        localVarFormParams.put("type", type);
        if (qroleId != null)
        localVarFormParams.put("qroleId", qroleId);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addSystemAuthorityToQroleValidateBeforeCall(Integer type, Long qroleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling addSystemAuthorityToQrole(Async)");
        }
        
        // verify the required parameter 'qroleId' is set
        if (qroleId == null) {
            throw new ApiException("Missing the required parameter 'qroleId' when calling addSystemAuthorityToQrole(Async)");
        }
        

        com.squareup.okhttp.Call call = addSystemAuthorityToQroleCall(type, qroleId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Granting a System Privilege to a Role
     * Granting a System Privilege to a Role
     * @param type Type of System Authorization 0:System Administrator Authorization 1:App Creator Authorization 2:User Manager Authorization (required)
     * @param qroleId Role ID (required)
     * @return SystemAuthorityWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SystemAuthorityWrapper addSystemAuthorityToQrole(Integer type, Long qroleId) throws ApiException {
        ApiResponse<SystemAuthorityWrapper> resp = addSystemAuthorityToQroleWithHttpInfo(type, qroleId);
        return resp.getData();
    }

    /**
     * Granting a System Privilege to a Role
     * Granting a System Privilege to a Role
     * @param type Type of System Authorization 0:System Administrator Authorization 1:App Creator Authorization 2:User Manager Authorization (required)
     * @param qroleId Role ID (required)
     * @return ApiResponse&lt;SystemAuthorityWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SystemAuthorityWrapper> addSystemAuthorityToQroleWithHttpInfo(Integer type, Long qroleId) throws ApiException {
        com.squareup.okhttp.Call call = addSystemAuthorityToQroleValidateBeforeCall(type, qroleId, null, null);
        Type localVarReturnType = new TypeToken<SystemAuthorityWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Granting a System Privilege to a Role (asynchronously)
     * Granting a System Privilege to a Role
     * @param type Type of System Authorization 0:System Administrator Authorization 1:App Creator Authorization 2:User Manager Authorization (required)
     * @param qroleId Role ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addSystemAuthorityToQroleAsync(Integer type, Long qroleId, final ApiCallback<SystemAuthorityWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addSystemAuthorityToQroleValidateBeforeCall(type, qroleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SystemAuthorityWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addSystemAuthorityToQuser
     * @param type Type of System Authorization 0:System Administrator Authorization 1:App Creator Authorization 2:User Manager Authorization (required)
     * @param quserId User ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addSystemAuthorityToQuserCall(Integer type, Long quserId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/API/Admin/SystemAuthority/addToQuser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (type != null)
        localVarFormParams.put("type", type);
        if (quserId != null)
        localVarFormParams.put("quserId", quserId);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addSystemAuthorityToQuserValidateBeforeCall(Integer type, Long quserId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling addSystemAuthorityToQuser(Async)");
        }
        
        // verify the required parameter 'quserId' is set
        if (quserId == null) {
            throw new ApiException("Missing the required parameter 'quserId' when calling addSystemAuthorityToQuser(Async)");
        }
        

        com.squareup.okhttp.Call call = addSystemAuthorityToQuserCall(type, quserId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Granting a System Privilege to a User
     * Granting a System Privilege to a User
     * @param type Type of System Authorization 0:System Administrator Authorization 1:App Creator Authorization 2:User Manager Authorization (required)
     * @param quserId User ID (required)
     * @return SystemAuthorityWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SystemAuthorityWrapper addSystemAuthorityToQuser(Integer type, Long quserId) throws ApiException {
        ApiResponse<SystemAuthorityWrapper> resp = addSystemAuthorityToQuserWithHttpInfo(type, quserId);
        return resp.getData();
    }

    /**
     * Granting a System Privilege to a User
     * Granting a System Privilege to a User
     * @param type Type of System Authorization 0:System Administrator Authorization 1:App Creator Authorization 2:User Manager Authorization (required)
     * @param quserId User ID (required)
     * @return ApiResponse&lt;SystemAuthorityWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SystemAuthorityWrapper> addSystemAuthorityToQuserWithHttpInfo(Integer type, Long quserId) throws ApiException {
        com.squareup.okhttp.Call call = addSystemAuthorityToQuserValidateBeforeCall(type, quserId, null, null);
        Type localVarReturnType = new TypeToken<SystemAuthorityWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Granting a System Privilege to a User (asynchronously)
     * Granting a System Privilege to a User
     * @param type Type of System Authorization 0:System Administrator Authorization 1:App Creator Authorization 2:User Manager Authorization (required)
     * @param quserId User ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addSystemAuthorityToQuserAsync(Integer type, Long quserId, final ApiCallback<SystemAuthorityWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addSystemAuthorityToQuserValidateBeforeCall(type, quserId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SystemAuthorityWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteSystemAuthority
     * @param id System Authorization ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSystemAuthorityCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/API/Admin/SystemAuthority/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (id != null)
        localVarFormParams.put("id", id);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSystemAuthorityValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteSystemAuthority(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSystemAuthorityCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deleting a System Privilege
     * Deleting a System Privilege
     * @param id System Authorization ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSystemAuthority(Long id) throws ApiException {
        deleteSystemAuthorityWithHttpInfo(id);
    }

    /**
     * Deleting a System Privilege
     * Deleting a System Privilege
     * @param id System Authorization ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSystemAuthorityWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = deleteSystemAuthorityValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deleting a System Privilege (asynchronously)
     * Deleting a System Privilege
     * @param id System Authorization ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSystemAuthorityAsync(Long id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSystemAuthorityValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for listMySystemAuthorities
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listMySystemAuthoritiesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/API/User/SystemAuthority/self";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listMySystemAuthoritiesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listMySystemAuthoritiesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieving a List of the user&#39;s own System Privileges
     * Retrieving a List of the user&#39;s own System Privileges
     * @return QuserSystemAuthorityList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QuserSystemAuthorityList listMySystemAuthorities() throws ApiException {
        ApiResponse<QuserSystemAuthorityList> resp = listMySystemAuthoritiesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieving a List of the user&#39;s own System Privileges
     * Retrieving a List of the user&#39;s own System Privileges
     * @return ApiResponse&lt;QuserSystemAuthorityList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QuserSystemAuthorityList> listMySystemAuthoritiesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listMySystemAuthoritiesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<QuserSystemAuthorityList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieving a List of the user&#39;s own System Privileges (asynchronously)
     * Retrieving a List of the user&#39;s own System Privileges
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listMySystemAuthoritiesAsync(final ApiCallback<QuserSystemAuthorityList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listMySystemAuthoritiesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QuserSystemAuthorityList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSystemAuthorities
     * @param type Type of System Authorization 0:System Administrator Authorization 1:App Creator Authorization 2:User Manager Authorization (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSystemAuthoritiesCall(Integer type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/API/Admin/SystemAuthority/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSystemAuthoritiesValidateBeforeCall(Integer type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling listSystemAuthorities(Async)");
        }
        

        com.squareup.okhttp.Call call = listSystemAuthoritiesCall(type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieving a List of System Privilege
     * Retrieving a List of System Privilege
     * @param type Type of System Authorization 0:System Administrator Authorization 1:App Creator Authorization 2:User Manager Authorization (required)
     * @return SystemAuthorityList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SystemAuthorityList listSystemAuthorities(Integer type) throws ApiException {
        ApiResponse<SystemAuthorityList> resp = listSystemAuthoritiesWithHttpInfo(type);
        return resp.getData();
    }

    /**
     * Retrieving a List of System Privilege
     * Retrieving a List of System Privilege
     * @param type Type of System Authorization 0:System Administrator Authorization 1:App Creator Authorization 2:User Manager Authorization (required)
     * @return ApiResponse&lt;SystemAuthorityList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SystemAuthorityList> listSystemAuthoritiesWithHttpInfo(Integer type) throws ApiException {
        com.squareup.okhttp.Call call = listSystemAuthoritiesValidateBeforeCall(type, null, null);
        Type localVarReturnType = new TypeToken<SystemAuthorityList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieving a List of System Privilege (asynchronously)
     * Retrieving a List of System Privilege
     * @param type Type of System Authorization 0:System Administrator Authorization 1:App Creator Authorization 2:User Manager Authorization (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSystemAuthoritiesAsync(Integer type, final ApiCallback<SystemAuthorityList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSystemAuthoritiesValidateBeforeCall(type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SystemAuthorityList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
