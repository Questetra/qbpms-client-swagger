/*
 * Questetra BPM Suite APIs
 * Questetra BPM Suite APIs
 *
 * OpenAPI spec version: 11.7.0
 * Contact: support@questetra.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.questetra.bpms.client.swagger.api;

import com.questetra.bpms.client.swagger.ApiCallback;
import com.questetra.bpms.client.swagger.ApiClient;
import com.questetra.bpms.client.swagger.ApiException;
import com.questetra.bpms.client.swagger.ApiResponse;
import com.questetra.bpms.client.swagger.Configuration;
import com.questetra.bpms.client.swagger.Pair;
import com.questetra.bpms.client.swagger.ProgressRequestBody;
import com.questetra.bpms.client.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.questetra.bpms.client.swagger.model.Errors;
import java.io.File;
import com.questetra.bpms.client.swagger.model.ProcessInstanceList;
import com.questetra.bpms.client.swagger.model.ProcessInstanceWrapper;
import com.questetra.bpms.client.swagger.model.WorkitemWrapper;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProcessInstanceApi {
    private ApiClient apiClient;

    public ProcessInstanceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProcessInstanceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for delete
     * @param processInstanceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCall(Integer processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/API/OR/ProcessInstance/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (processInstanceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "processInstanceId", processInstanceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteValidateBeforeCall(Integer processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processInstanceId' is set
        if (processInstanceId == null) {
            throw new ApiException("Missing the required parameter 'processInstanceId' when calling delete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteCall(processInstanceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deleting Process
     * Processes which a user can delete are limited to those the User started, no one else has concerned, or has authorization of Process Administrator.
     * @param processInstanceId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void delete(Integer processInstanceId) throws ApiException {
        deleteWithHttpInfo(processInstanceId);
    }

    /**
     * Deleting Process
     * Processes which a user can delete are limited to those the User started, no one else has concerned, or has authorization of Process Administrator.
     * @param processInstanceId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteWithHttpInfo(Integer processInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = deleteValidateBeforeCall(processInstanceId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deleting Process (asynchronously)
     * Processes which a user can delete are limited to those the User started, no one else has concerned, or has authorization of Process Administrator.
     * @param processInstanceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAsync(Integer processInstanceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteValidateBeforeCall(processInstanceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for downloadFile
     * @param id  (required)
     * @param processDataInstanceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadFileCall(Long id, Long processDataInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/API/OR/ProcessInstance/File/download";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "id", id));
        if (processDataInstanceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "processDataInstanceId", processDataInstanceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call downloadFileValidateBeforeCall(Long id, Long processDataInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling downloadFile(Async)");
        }
        
        // verify the required parameter 'processDataInstanceId' is set
        if (processDataInstanceId == null) {
            throw new ApiException("Missing the required parameter 'processDataInstanceId' when calling downloadFile(Async)");
        }
        
        
        com.squareup.okhttp.Call call = downloadFileCall(id, processDataInstanceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Downloading File type Process Data
     * Downloading File type Process Data
     * @param id  (required)
     * @param processDataInstanceId  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadFile(Long id, Long processDataInstanceId) throws ApiException {
        ApiResponse<File> resp = downloadFileWithHttpInfo(id, processDataInstanceId);
        return resp.getData();
    }

    /**
     * Downloading File type Process Data
     * Downloading File type Process Data
     * @param id  (required)
     * @param processDataInstanceId  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadFileWithHttpInfo(Long id, Long processDataInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = downloadFileValidateBeforeCall(id, processDataInstanceId, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Downloading File type Process Data (asynchronously)
     * Downloading File type Process Data
     * @param id  (required)
     * @param processDataInstanceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadFileAsync(Long id, Long processDataInstanceId, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadFileValidateBeforeCall(id, processDataInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for list
     * @param criteria Search condition (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listCall(String criteria, Integer limit, Integer start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/API/OR/ProcessInstance/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (criteria != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "criteria", criteria));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listValidateBeforeCall(String criteria, Integer limit, Integer start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = listCall(criteria, limit, start, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Querying for Task records operated by the User
     * Querying for Task records operated by the User
     * @param criteria Search condition (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @return ProcessInstanceList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProcessInstanceList list(String criteria, Integer limit, Integer start) throws ApiException {
        ApiResponse<ProcessInstanceList> resp = listWithHttpInfo(criteria, limit, start);
        return resp.getData();
    }

    /**
     * Querying for Task records operated by the User
     * Querying for Task records operated by the User
     * @param criteria Search condition (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @return ApiResponse&lt;ProcessInstanceList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProcessInstanceList> listWithHttpInfo(String criteria, Integer limit, Integer start) throws ApiException {
        com.squareup.okhttp.Call call = listValidateBeforeCall(criteria, limit, start, null, null);
        Type localVarReturnType = new TypeToken<ProcessInstanceList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Querying for Task records operated by the User (asynchronously)
     * Querying for Task records operated by the User
     * @param criteria Search condition (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAsync(String criteria, Integer limit, Integer start, final ApiCallback<ProcessInstanceList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listValidateBeforeCall(criteria, limit, start, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProcessInstanceList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listCsv
     * @param criteria Search condition (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listCsvCall(String criteria, Integer limit, Integer start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/API/OR/ProcessInstance/listCsv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (criteria != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "criteria", criteria));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listCsvValidateBeforeCall(String criteria, Integer limit, Integer start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = listCsvCall(criteria, limit, start, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Querying for all Process Instances records
     * Querying for all Process Instances records
     * @param criteria Search condition (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String listCsv(String criteria, Integer limit, Integer start) throws ApiException {
        ApiResponse<String> resp = listCsvWithHttpInfo(criteria, limit, start);
        return resp.getData();
    }

    /**
     * Querying for all Process Instances records
     * Querying for all Process Instances records
     * @param criteria Search condition (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> listCsvWithHttpInfo(String criteria, Integer limit, Integer start) throws ApiException {
        com.squareup.okhttp.Call call = listCsvValidateBeforeCall(criteria, limit, start, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Querying for all Process Instances records (asynchronously)
     * Querying for all Process Instances records
     * @param criteria Search condition (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listCsvAsync(String criteria, Integer limit, Integer start, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listCsvValidateBeforeCall(criteria, limit, start, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listCsvUtf16
     * @param criteria Search condition (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listCsvUtf16Call(String criteria, Integer limit, Integer start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/API/OR/ProcessInstance/listCsvUtf16";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (criteria != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "criteria", criteria));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listCsvUtf16ValidateBeforeCall(String criteria, Integer limit, Integer start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = listCsvUtf16Call(criteria, limit, start, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Querying for all Process Instances records
     * Querying for all Process Instances records
     * @param criteria Search condition (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String listCsvUtf16(String criteria, Integer limit, Integer start) throws ApiException {
        ApiResponse<String> resp = listCsvUtf16WithHttpInfo(criteria, limit, start);
        return resp.getData();
    }

    /**
     * Querying for all Process Instances records
     * Querying for all Process Instances records
     * @param criteria Search condition (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> listCsvUtf16WithHttpInfo(String criteria, Integer limit, Integer start) throws ApiException {
        com.squareup.okhttp.Call call = listCsvUtf16ValidateBeforeCall(criteria, limit, start, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Querying for all Process Instances records (asynchronously)
     * Querying for all Process Instances records
     * @param criteria Search condition (optional)
     * @param limit Max number of records to return (optional)
     * @param start The offset of the first record to return (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listCsvUtf16Async(String criteria, Integer limit, Integer start, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listCsvUtf16ValidateBeforeCall(criteria, limit, start, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startProcessInstance
     * @param processModelInfoId  (required)
     * @param nodeNumber  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startProcessInstanceCall(Long processModelInfoId, Long nodeNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/API/PE/ProcessInstance/start";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (processModelInfoId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "processModelInfoId", processModelInfoId));
        if (nodeNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "nodeNumber", nodeNumber));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startProcessInstanceValidateBeforeCall(Long processModelInfoId, Long nodeNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processModelInfoId' is set
        if (processModelInfoId == null) {
            throw new ApiException("Missing the required parameter 'processModelInfoId' when calling startProcessInstance(Async)");
        }
        
        // verify the required parameter 'nodeNumber' is set
        if (nodeNumber == null) {
            throw new ApiException("Missing the required parameter 'nodeNumber' when calling startProcessInstance(Async)");
        }
        
        
        com.squareup.okhttp.Call call = startProcessInstanceCall(processModelInfoId, nodeNumber, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creating a Process Instance
     * Creating a Process Instance
     * @param processModelInfoId  (required)
     * @param nodeNumber  (required)
     * @return WorkitemWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorkitemWrapper startProcessInstance(Long processModelInfoId, Long nodeNumber) throws ApiException {
        ApiResponse<WorkitemWrapper> resp = startProcessInstanceWithHttpInfo(processModelInfoId, nodeNumber);
        return resp.getData();
    }

    /**
     * Creating a Process Instance
     * Creating a Process Instance
     * @param processModelInfoId  (required)
     * @param nodeNumber  (required)
     * @return ApiResponse&lt;WorkitemWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorkitemWrapper> startProcessInstanceWithHttpInfo(Long processModelInfoId, Long nodeNumber) throws ApiException {
        com.squareup.okhttp.Call call = startProcessInstanceValidateBeforeCall(processModelInfoId, nodeNumber, null, null);
        Type localVarReturnType = new TypeToken<WorkitemWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creating a Process Instance (asynchronously)
     * Creating a Process Instance
     * @param processModelInfoId  (required)
     * @param nodeNumber  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startProcessInstanceAsync(Long processModelInfoId, Long nodeNumber, final ApiCallback<WorkitemWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startProcessInstanceValidateBeforeCall(processModelInfoId, nodeNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorkitemWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stop
     * @param processInstanceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopCall(Long processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/API/OR/ProcessInstance/stop";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (processInstanceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "processInstanceId", processInstanceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopValidateBeforeCall(Long processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processInstanceId' is set
        if (processInstanceId == null) {
            throw new ApiException("Missing the required parameter 'processInstanceId' when calling stop(Async)");
        }
        
        
        com.squareup.okhttp.Call call = stopCall(processInstanceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Terminating Process
     * Processes which a user can stop are limited to those the User started, no one else has concerned, or has authorization of Process Administrator.
     * @param processInstanceId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void stop(Long processInstanceId) throws ApiException {
        stopWithHttpInfo(processInstanceId);
    }

    /**
     * Terminating Process
     * Processes which a user can stop are limited to those the User started, no one else has concerned, or has authorization of Process Administrator.
     * @param processInstanceId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> stopWithHttpInfo(Long processInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = stopValidateBeforeCall(processInstanceId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Terminating Process (asynchronously)
     * Processes which a user can stop are limited to those the User started, no one else has concerned, or has authorization of Process Administrator.
     * @param processInstanceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopAsync(Long processInstanceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopValidateBeforeCall(processInstanceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for view
     * @param processInstanceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call viewCall(Long processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/API/OR/ProcessInstance/view";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (processInstanceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "processInstanceId", processInstanceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viewValidateBeforeCall(Long processInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processInstanceId' is set
        if (processInstanceId == null) {
            throw new ApiException("Missing the required parameter 'processInstanceId' when calling view(Async)");
        }
        
        
        com.squareup.okhttp.Call call = viewCall(processInstanceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieving Process Instance
     * Retrieving Process Instance
     * @param processInstanceId  (required)
     * @return ProcessInstanceWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProcessInstanceWrapper view(Long processInstanceId) throws ApiException {
        ApiResponse<ProcessInstanceWrapper> resp = viewWithHttpInfo(processInstanceId);
        return resp.getData();
    }

    /**
     * Retrieving Process Instance
     * Retrieving Process Instance
     * @param processInstanceId  (required)
     * @return ApiResponse&lt;ProcessInstanceWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProcessInstanceWrapper> viewWithHttpInfo(Long processInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = viewValidateBeforeCall(processInstanceId, null, null);
        Type localVarReturnType = new TypeToken<ProcessInstanceWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieving Process Instance (asynchronously)
     * Retrieving Process Instance
     * @param processInstanceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viewAsync(Long processInstanceId, final ApiCallback<ProcessInstanceWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viewValidateBeforeCall(processInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProcessInstanceWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
