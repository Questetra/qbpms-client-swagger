/*
 * Questetra BPM Suite APIs
 * Questetra BPM Suite APIs
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@questetra.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.questetra.bpms.client.swagger.api;

import com.questetra.bpms.client.swagger.ApiException;
import com.questetra.bpms.client.swagger.model.Errors;
import com.questetra.bpms.client.swagger.model.WorkitemList;
import com.questetra.bpms.client.swagger.model.WorkitemOpResultList;
import com.questetra.bpms.client.swagger.model.WorkitemWithDataList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WorkitemApi
 */
@Ignore
public class WorkitemApiTest {

    private final WorkitemApi api = new WorkitemApi();

    
    /**
     * Adding a Star to a Task
     *
     * Adding a Star to a Task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addStarTest() throws ApiException {
        Long workitemId = null;
        api.addStar(workitemId);

        // TODO: test validations
    }
    
    /**
     * Accepting a Offered Task
     *
     * Accepting a Offered Task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void batchAccespWorkitemTest() throws ApiException {
        List<Long> workitemIds = null;
        WorkitemOpResultList response = api.batchAccespWorkitem(workitemIds);

        // TODO: test validations
    }
    
    /**
     * Querying for Task records operated by the User
     *
     * Querying for Task records operated by the User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        String criteria = null;
        Integer limit = null;
        Integer start = null;
        WorkitemWithDataList response = api.list(criteria, limit, start);

        // TODO: test validations
    }
    
    /**
     * Retrieving a List of My Tasks
     *
     * Retrieving a List of My Tasks
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAllocatedWorkitemTest() throws ApiException {
        WorkitemList response = api.listAllocatedWorkitem();

        // TODO: test validations
    }
    
    /**
     * Querying for Task records operated by the User
     *
     * Querying for Task records operated by the User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCsvTest() throws ApiException {
        String criteria = null;
        Integer limit = null;
        Integer start = null;
        String response = api.listCsv(criteria, limit, start);

        // TODO: test validations
    }
    
    /**
     * Querying for Task records operated by the User
     *
     * Querying for Task records operated by the User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCsvUtf16Test() throws ApiException {
        String criteria = null;
        Integer limit = null;
        Integer start = null;
        String response = api.listCsvUtf16(criteria, limit, start);

        // TODO: test validations
    }
    
    /**
     * Retrieving a List of Offered Tasks
     *
     * Retrieving a List of Offered Tasks
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOfferedWorkitemTest() throws ApiException {
        WorkitemList response = api.listOfferedWorkitem();

        // TODO: test validations
    }
    
    /**
     * Reallocating Task
     *
     * The specified Task is placed on the Swimlane which is set [allocated to the person who processed the first task], and if multiple Tasks in processing exist, all of the Tasks will be allocated.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reallocateTest() throws ApiException {
        Long workitemId = null;
        Long quserId = null;
        Long qgroupId = null;
        api.reallocate(workitemId, quserId, qgroupId);

        // TODO: test validations
    }
    
    /**
     * Removing a Star from a Task
     *
     * Removing a Star from a Task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeStarTest() throws ApiException {
        Long workitemId = null;
        api.removeStar(workitemId);

        // TODO: test validations
    }
    
}
